require 'mustache'
require_relative '../dress_code_react'

class DressCodeReact::Generator

  STATIC = "#{File.dirname(__FILE__)}/../static"
  TEMPLATE = "#{STATIC}/styleguide.html.mustache"

  def initialize(opts)
    @cjsx_out_file = opts[:cjsx_out_file]
    @out_file = opts[:out_file] || 'styleguide.html'
    @docs = opts[:docs]
    @css = opts[:css]
    @js = opts[:js]
    @template = opts[:template] || TEMPLATE
    @inline_css = opts[:inline_css].nil? ? true : !!opts[:inline_css]
    @inline_js = opts[:inline_js].nil? ? true : !!opts[:inline_js]
  end

  def generate
    template = File.read(@template)

    write_file(@out_file, Mustache.render(template, {
      :docs => map_docs,
      :css => @css,
      :js => @js,
      :dress_code_css => fetch_inline_css,
      :dress_code_js => fetch_inline_js
    }))

    code_blocks = @docs.first.cjsx_code_blocks
    write_file(@cjsx_out_file, generate_react_components(code_blocks))
  end

  # Collect all `cjsx` code blocks and wrap them in React components.
  # Render all React components to corresponding <div> elements on load.
  def generate_react_components(code_blocks)
    components = ''
    load_blocks = "$(document).ready ->\n"

    code_blocks.each_with_index do |block, index|
      block = block.chomp

      component_name = "ReactSGComponent#{index}"
      components << "window.#{component_name} = "

      # If code block has method definitions, do nothing.
      # Otherwise, put the code inside the "render" method.
      if block.include?(': ->')
        components << "#{block}\n\n"
      else
        components << "React.createClass\n" \
          "  displayName: '#{component_name}'\n\n"

        block = indent_lines(block, 4)
        components << "  render: ->\n" \
          "#{block}\n\n"
      end

      # Render React component to <div> on load.
      load_blocks <<
        "  React.render <#{component_name} />, " \
        "document.querySelector('.cjsx-rendered-#{index}')\n"
    end

    "# This file was generated by the dress_code_react gem.\n" \
    "#{components}#{load_blocks}"
  end

  def indent_lines(lines, spaces)
    spaces = ' ' * spaces
    lines.gsub(/(.+)/, "#{spaces}\\1")
  end

  def fetch_inline_css
    return unless @inline_css
    File.read("#{STATIC}/base.css") + File.read("#{STATIC}/github.css")
  end

  def fetch_inline_js
    return unless @inline_js
    File.read("#{STATIC}/docs.js")
  end

  def map_docs
    @docs.map { |doc| map_doc(doc) }
  end

  def map_doc(doc)
    {
      :id => "#{doc.component.gsub(' ', '_').downcase}",
      :prose => doc.to_html,
      :component => doc.component,
      :file => doc.relative_path
    }
  end

  def write_file(path, content)
    File.open(path, 'w') do |file|
      puts "# writing file: #{path}"
      file.write(content)
    end
  end

end

